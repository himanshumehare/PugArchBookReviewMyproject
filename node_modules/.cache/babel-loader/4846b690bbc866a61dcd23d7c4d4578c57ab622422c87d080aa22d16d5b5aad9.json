{"ast":null,"code":"const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000/api';\nexport const apiFetch = async (path, options = {}) => {\n  const token = localStorage.getItem('token');\n  const headers = {\n    'Content-Type': 'application/json',\n    ...(options.headers || {})\n  };\n  if (token) {\n    headers.Authorization = `Bearer ${token}`;\n    console.log('Sending request with token:', token.substring(0, 20) + '...');\n  } else {\n    console.log('No token found in localStorage');\n  }\n  console.log('API Request:', `${API_BASE}${path}`, {\n    headers,\n    ...options\n  });\n  try {\n    const res = await fetch(`${API_BASE}${path}`, {\n      ...options,\n      headers\n    });\n    if (!res.ok) {\n      const error = await res.json().catch(() => ({}));\n      console.error('API Error Response:', error);\n      throw new Error(error.message || `Request failed: ${res.status}`);\n    }\n    return res.json();\n  } catch (error) {\n    console.error('API Error:', error);\n    throw error;\n  }\n};\n\n// Auth API calls\nexport const authAPI = {\n  register: userData => apiFetch('/auth/register', {\n    method: 'POST',\n    body: JSON.stringify(userData)\n  }),\n  login: credentials => apiFetch('/auth/login', {\n    method: 'POST',\n    body: JSON.stringify(credentials)\n  })\n};\n\n// Books API calls\nexport const booksAPI = {\n  getAll: () => apiFetch('/books'),\n  getById: id => apiFetch(`/books/${id}`)\n};\n\n// Reviews API calls\nexport const reviewsAPI = {\n  create: reviewData => apiFetch('/reviews', {\n    method: 'POST',\n    body: JSON.stringify(reviewData)\n  }),\n  getByBookId: bookId => apiFetch(`/reviews/${bookId}`),\n  getUserReviews: userId => apiFetch(`/reviews/user/${userId}`)\n};","map":{"version":3,"names":["API_BASE","process","env","REACT_APP_API_BASE","apiFetch","path","options","token","localStorage","getItem","headers","Authorization","console","log","substring","res","fetch","ok","error","json","catch","Error","message","status","authAPI","register","userData","method","body","JSON","stringify","login","credentials","booksAPI","getAll","getById","id","reviewsAPI","create","reviewData","getByBookId","bookId","getUserReviews","userId"],"sources":["C:/Users/himan/Desktop/My.website/frontend/src/api/client.js"],"sourcesContent":["const API_BASE = process.env.REACT_APP_API_BASE || 'http://localhost:5000/api';\r\n\r\nexport const apiFetch = async (path, options = {}) => {\r\n  const token = localStorage.getItem('token');\r\n  const headers = { \r\n    'Content-Type': 'application/json', \r\n    ...(options.headers || {}) \r\n  };\r\n  \r\n  if (token) {\r\n    headers.Authorization = `Bearer ${token}`;\r\n    console.log('Sending request with token:', token.substring(0, 20) + '...');\r\n  } else {\r\n    console.log('No token found in localStorage');\r\n  }\r\n  \r\n  console.log('API Request:', `${API_BASE}${path}`, { headers, ...options });\r\n  \r\n  try {\r\n    const res = await fetch(`${API_BASE}${path}`, { \r\n      ...options, \r\n      headers \r\n    });\r\n    \r\n    if (!res.ok) {\r\n      const error = await res.json().catch(() => ({}));\r\n      console.error('API Error Response:', error);\r\n      throw new Error(error.message || `Request failed: ${res.status}`);\r\n    }\r\n    \r\n    return res.json();\r\n  } catch (error) {\r\n    console.error('API Error:', error);\r\n    throw error;\r\n  }\r\n};\r\n\r\n// Auth API calls\r\nexport const authAPI = {\r\n  register: (userData) => apiFetch('/auth/register', {\r\n    method: 'POST',\r\n    body: JSON.stringify(userData)\r\n  }),\r\n  \r\n  login: (credentials) => apiFetch('/auth/login', {\r\n    method: 'POST',\r\n    body: JSON.stringify(credentials)\r\n  })\r\n};\r\n\r\n// Books API calls\r\nexport const booksAPI = {\r\n  getAll: () => apiFetch('/books'),\r\n  getById: (id) => apiFetch(`/books/${id}`)\r\n};\r\n\r\n// Reviews API calls\r\nexport const reviewsAPI = {\r\n  create: (reviewData) => apiFetch('/reviews', {\r\n    method: 'POST',\r\n    body: JSON.stringify(reviewData)\r\n  }),\r\n  getByBookId: (bookId) => apiFetch(`/reviews/${bookId}`),\r\n  getUserReviews: (userId) => apiFetch(`/reviews/user/${userId}`)\r\n};\r\n"],"mappings":"AAAA,MAAMA,QAAQ,GAAGC,OAAO,CAACC,GAAG,CAACC,kBAAkB,IAAI,2BAA2B;AAE9E,OAAO,MAAMC,QAAQ,GAAG,MAAAA,CAAOC,IAAI,EAAEC,OAAO,GAAG,CAAC,CAAC,KAAK;EACpD,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,MAAMC,OAAO,GAAG;IACd,cAAc,EAAE,kBAAkB;IAClC,IAAIJ,OAAO,CAACI,OAAO,IAAI,CAAC,CAAC;EAC3B,CAAC;EAED,IAAIH,KAAK,EAAE;IACTG,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;IACzCK,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEN,KAAK,CAACO,SAAS,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG,KAAK,CAAC;EAC5E,CAAC,MAAM;IACLF,OAAO,CAACC,GAAG,CAAC,gCAAgC,CAAC;EAC/C;EAEAD,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,GAAGb,QAAQ,GAAGK,IAAI,EAAE,EAAE;IAAEK,OAAO;IAAE,GAAGJ;EAAQ,CAAC,CAAC;EAE1E,IAAI;IACF,MAAMS,GAAG,GAAG,MAAMC,KAAK,CAAC,GAAGhB,QAAQ,GAAGK,IAAI,EAAE,EAAE;MAC5C,GAAGC,OAAO;MACVI;IACF,CAAC,CAAC;IAEF,IAAI,CAACK,GAAG,CAACE,EAAE,EAAE;MACX,MAAMC,KAAK,GAAG,MAAMH,GAAG,CAACI,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;MAChDR,OAAO,CAACM,KAAK,CAAC,qBAAqB,EAAEA,KAAK,CAAC;MAC3C,MAAM,IAAIG,KAAK,CAACH,KAAK,CAACI,OAAO,IAAI,mBAAmBP,GAAG,CAACQ,MAAM,EAAE,CAAC;IACnE;IAEA,OAAOR,GAAG,CAACI,IAAI,CAAC,CAAC;EACnB,CAAC,CAAC,OAAOD,KAAK,EAAE;IACdN,OAAO,CAACM,KAAK,CAAC,YAAY,EAAEA,KAAK,CAAC;IAClC,MAAMA,KAAK;EACb;AACF,CAAC;;AAED;AACA,OAAO,MAAMM,OAAO,GAAG;EACrBC,QAAQ,EAAGC,QAAQ,IAAKtB,QAAQ,CAAC,gBAAgB,EAAE;IACjDuB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACJ,QAAQ;EAC/B,CAAC,CAAC;EAEFK,KAAK,EAAGC,WAAW,IAAK5B,QAAQ,CAAC,aAAa,EAAE;IAC9CuB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACE,WAAW;EAClC,CAAC;AACH,CAAC;;AAED;AACA,OAAO,MAAMC,QAAQ,GAAG;EACtBC,MAAM,EAAEA,CAAA,KAAM9B,QAAQ,CAAC,QAAQ,CAAC;EAChC+B,OAAO,EAAGC,EAAE,IAAKhC,QAAQ,CAAC,UAAUgC,EAAE,EAAE;AAC1C,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG;EACxBC,MAAM,EAAGC,UAAU,IAAKnC,QAAQ,CAAC,UAAU,EAAE;IAC3CuB,MAAM,EAAE,MAAM;IACdC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAACS,UAAU;EACjC,CAAC,CAAC;EACFC,WAAW,EAAGC,MAAM,IAAKrC,QAAQ,CAAC,YAAYqC,MAAM,EAAE,CAAC;EACvDC,cAAc,EAAGC,MAAM,IAAKvC,QAAQ,CAAC,iBAAiBuC,MAAM,EAAE;AAChE,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}